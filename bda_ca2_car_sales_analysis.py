# -*- coding: utf-8 -*-
"""BDA -CA2 Car sales analysis

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Q3g0g7n5VYdnLYWdmjXXD2lIWNfs7sRq

Import Libraries
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import plotly.graph_objects as go

"""import csv file"""

df=pd.read_csv('/content/Car Sales.xlsx - car_data.csv')
df.head()

df.shape

df.isna().sum()

df.info()

df.describe()

df=df.drop(columns=['Car_id','Dealer_No ','Phone'],axis=1)

df.head()

df=df.rename(columns={'Price ($)':'Price','Body Style':'Style','Dealer_Region':'AG_Loc'})

df.Date=pd.to_datetime(df.Date)

"""Data Visualization"""

time_series_data = df.groupby('Date').agg({'Price': 'sum'}).reset_index()
plt.figure(figsize=(12, 6))
sns.lineplot(data=time_series_data, x='Date', y='Price')
plt.title('Price Trend Over Time')
plt.xlabel('Date')
plt.ylabel('Price')
plt.xticks(rotation=45)

sns.countplot(data=df,x='Gender')
plt.title('Type of Gender and num')

Com_p=df.groupby(by=['Company']).agg({'Price':'sum'})
top_10=Com_p.sort_values(by='Price',ascending=False)[:10]

fig = go.Figure(data=[
    go.Bar(x=top_10.index, y=top_10['Price'])
    ])

fig.update_layout(
    title='Top 10 Combinations of Company and Total Price',
    xaxis_title='Company',
    yaxis_title='Price'
)

fig.show()

filter=df.groupby(by=['Style']).agg({'Price':'sum'})
car_style=filter.sort_values(by='Price',ascending=False)

fig = go.Figure(data=[
    go.Bar(x=car_style.index,y=car_style.Price)
    ])

fig.update_layout(
    title='Car Styles and Total Price',
    xaxis_title='Style',
    yaxis_title='Price'
)

fig.show()

filter=df[((df.Company=='Chevrolet')|(df.Company=='Ford')
         |(df.Company=='Dodge')|(df.Company=='Oldsmobile')|
          (df.Company=='Mercedes-B'))]

filter=filter.sort_values(by='Price',ascending=False)

fig = go.Figure()

for company, subset in filter.groupby('Company'):
    fig.add_trace(go.Bar(
        x=subset['Style'],
        y=subset['Price'],
        name=company,
        orientation='v'
    ))

# Customize the layout
fig.update_layout(
    title='Car Prices by Style and Company',
    xaxis_title='Car Style',
    yaxis_title='Price',
    barmode='group',
    height=600,
    width=1000
)

# Show the plot
fig.show()

filter=df[((df.Company=='Chevrolet')|(df.Company=='Ford')
                                     |(df.Company=='Dodge')|(df.Company=='Oldsmobile')|
                                     (df.Company=='Mercedes-B'))]
filter=filter.sort_values(by='Price',ascending=False)
fig = go.Figure()
bar_colors = ['#010101', '#E25508', '#1D5E22', '#B42121', 'purple']

for i, (company, subset) in enumerate(filter.groupby('Company')):
    fig.add_trace(go.Bar(
        x=subset['Transmission'],
        y=subset['Price'],
        name=company,
        orientation='v',
        marker_color=bar_colors[i % len(bar_colors)]  # Cycle through the list of colors
    ))
# Customize the layout
fig.update_layout(
    title='Car Prices by Transmissions and Company',
    xaxis_title='Transmissions',
    yaxis_title='Price',
    barmode='group',
    height=600,
    width=1000
)

# Show the plot
fig.show()

df.Dealer_Name.value_counts()[:5]

"""area location"""

df['AG_Loc'].value_counts()

filter=df[((df.Company=='Chevrolet')|(df.Company=='Ford')
                                     |(df.Company=='Dodge')|(df.Company=='Oldsmobile')|
                                     (df.Company=='Mercedes-B'))]
filter=filter.sort_values(by='Price',ascending=False)
fig = go.Figure()

for i, (company, subset) in enumerate(filter.groupby('Company')):
    fig.add_trace(go.Bar(
        x=subset['AG_Loc'],
        y=subset['Price'],
        name=company,
        orientation='v',
    ))
# Customize the layout
fig.update_layout(
    title='Car Prices by Transmissions and Company',
    xaxis_title='Dealer Region',
    yaxis_title='Price',
    barmode='group',
    height=600,
    width=1000
)

# Show the plot
fig.show()

df.Engine.value_counts()



"""apriori algorithm"""

from mlxtend.frequent_patterns import apriori
from mlxtend.frequent_patterns import association_rules
import pandas as pd


# Load the CSV file
file_path = "/content/Car Sales.xlsx - car_data.csv"  # Replace with your file path
data = pd.read_csv(file_path)


# Assuming the data has a structure where each row represents a transaction
# Convert the data into a one-hot encoded format
one_hot_encoded = pd.get_dummies(data)


# Apriori Algorithm to find frequent itemsets
frequent_itemsets = apriori
('one_hot_encoded, min_support=0.2, use_colnames=true')


# Generate association rules
rules = association_rules
("frequent_itemsets, metric ='lift', min_threshold=1")


# Displaying the association rules
print(rules)

"""polynomial regression"""

import pandas as pd
import matplotlib.pyplot as plt

# Load the dataset
data_set = pd.read_csv('/content/Car Sales.xlsx - car_data.csv')  # Correct the file path

# Check the unique values in the company and Color columns
print("Unique values in Company column:", data_set['Company'].unique())
print("Unique values in Color column:", data_set['Color'].unique())

# Handle non-numeric values appropriately
# For example, you can convert dates to numeric representation if they represent meaningful data

# Convert dates to numeric representation (example)
# data_set['Date'] = pd.to_numeric(data_set['Date'], errors='coerce')

# Drop rows with non-numeric values
# data_set = data_set.dropna(subset=['Date'])

# Extracting independent and dependent variables
x = data_set.iloc[:, 1:2].values  # Assuming the second column is the independent variable
y = data_set.iloc[:, 2].values  # Assuming the third column is the dependent variable

# Continue with fitting Polynomial Regression and visualization